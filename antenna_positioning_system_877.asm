title “Antenna Positioning System”
#define _version “1.10”
;
; Update History: 4/3/2023
;
; Application Description/Comments
;
; Authors: Malik Mouhiidine, Osamah Awlaqi
;
; Hardware Notes:
;
LIST P=16F877A ; Device Specification
#INCLUDE <P16F877A.inc> ; Include Files/Registers

; Variable Register Declarations

; Macros

__CONFIG _CP_OFF & _XT_OSC & _PWRTE_ON & _WDT_OFF & _BODEN_OFF

CBLOCK 0x0C
	COMPT1
	COMPT2
	SAVE_WORK_COMPT
	SAVE_WORK_COMPT_5M
	DUTY_CYCLE
	SAVE_DUTY_CYCLE
	SAVE_WORK_ADC
ENDC

CBLOCK 0x20
	DIVISOR
	QUOTIEN
	DIVIDER
	SAVE_WORK_CALC
	REMAINDER
	POSITION
	POSITION_COMPT_TIMER
	ACTION
ENDC

ORG 0
MAINLINE:
 	BSF STATUS,RP0 ; Select bank 1

	MOVLW b'00000000'   ; Configure ADCON1 for Fosc/32 and AN0 as analog input
    MOVWF ADCON1

	MOVLW b'00000111'
	MOVWF TRISB

 	MOVLW b'00000000'
	MOVWF TRISC

	MOVLW b'00000000'
	MOVWF TRISD
	
	MOVLW d'255' ; Set the Cycle time to 255 for varying the duty cycle from 0-255
	MOVWF PR2


	BCF STATUS,RP0 ; Select bank 0


	MOVLW 0x0F ; Select the PWM mode.
	MOVWF CCP1CON
	MOVWF CCP2CON

	; By default set the Duty Cycle to 0
	CLRF CCPR1L
	CLRF CCPR2L

	MOVLW b'00000111'
	BSF T2CON, 2 ; Start the Timer for PWM generation (TMR2ON)

	MOVLW h'38'
	CALL LCD_COMMAND

	MOVLW h'06'
	CALL LCD_COMMAND

	MOVLW h'0C'
	CALL LCD_COMMAND

	MOVLW h'01'
	CALL LCD_COMMAND

	CALL DELAY_5MS

 	CLRF PORTB
 	CLRF PORTC
 	CLRF PORTD

	MOVLW b'00000001'
	MOVWF ACTION ; bit 0,1,2 => stop, right, left 

	BSF STATUS,RP1 ; 
	BCF STATUS,RP0 ; Bank 2
	MOVLW h'10' ; Data Memory 
	MOVWF EEADR ; Address to read
	BSF STATUS,RP0 ; Bank 3
	BCF EECON1,EEPGD ; Point to Data memory
	BSF EECON1,RD ; EE Read
	BCF STATUS,RP0 ; Bank 2
	MOVF EEDATA,W ; W = EEDATA
	BCF STATUS,RP1 ;
	BCF STATUS,RP0 ; Bank 0
 	MOVWF POSITION

	MOVLW d'255'
 	MOVWF POSITION_COMPT_TIMER

	GOTO MAINLINE_CODE

MAINLINE_CODE:
	CALL ADC
	CALL TURN
	GOTO MAINLINE_CODE

TURN:
	BTFSS PORTB, 2
		CALL STOP_ACTION
	BTFSS PORTB, 0
		CALL RIGHT_ACTION
	BTFSS PORTB, 1
		CALL LEFT_ACTION

	BTFSC ACTION, 0
		CALL REALLY_STOP
	BTFSC ACTION, 1
		CALL TEST_RIGHT
	BTFSC ACTION, 2
		CALL TEST_LEFT

	CALL SHOW_SPEED
	CALL SHOW_POSITION
	CALL SAVE_POSITION
	RETURN

RIGHT_ACTION:
	BSF ACTION, 1
	BCF ACTION, 0
	BCF ACTION, 2
	RETURN

LEFT_ACTION:
	BSF ACTION, 2
	BCF ACTION, 0
	BCF ACTION, 1
	RETURN

STOP_ACTION:
	BSF ACTION, 0
	BCF ACTION, 1
	BCF ACTION, 2
	RETURN

SAVE_POSITION:
	BSF STATUS,RP1
	BSF STATUS,RP0
	WAIT_WRITE:
		BTFSC EECON1,WR ;Wait for write
			GOTO WAIT_WRITE ;to complete
	BCF STATUS, RP0 ;Bank 2
	MOVLW h'10' ;Data Memory
	MOVWF EEADR ;Address to write
	BCF STATUS,RP1
	MOVF POSITION, W ;Data Memory Value
	BSF STATUS,RP1
	MOVWF EEDATA ;to write
	BSF STATUS,RP0 ;Bank 3
	BCF EECON1,EEPGD ;Point to DATA memory
	BSF EECON1,WREN ;Enable writes
	MOVLW h'55' ;
	MOVWF EECON2 ;Write 55h
	MOVLW h'AA' ;
	MOVWF EECON2 ;Write AAh
	BSF EECON1,WR ;Set WR bit to begin write
	BCF EECON1,WREN ;Disable writes
	BCF STATUS,RP1
	BCF STATUS,RP0
	RETURN

SHOW_POSITION:
	MOVLW h'C0' ; Set cursor to second line first column 
	CALL LCD_COMMAND

	MOVLW h'50' ; P
	CALL LCD_DATA

	MOVLW h'4F' ; O
	CALL LCD_DATA

	MOVLW h'53' ; S
	CALL LCD_DATA

	MOVLW h'49' ; I
	CALL LCD_DATA

	MOVLW h'54' ; T
	CALL LCD_DATA

	MOVLW h'49' ; I
	CALL LCD_DATA

	MOVLW h'4F' ; O
	CALL LCD_DATA

	MOVLW h'4E' ; N
	CALL LCD_DATA

	MOVLW h'3A' ; :
	CALL LCD_DATA

	MOVF POSITION, W
	CALL SHOW_THREE_NUMBERS

	RETURN

SHOW_SPEED:
	MOVLW h'80'
	CALL LCD_COMMAND

	MOVLW "S"
	CALL LCD_DATA

	MOVLW "P"
	CALL LCD_DATA

	MOVLW "E"
	CALL LCD_DATA

	MOVLW "E"
	CALL LCD_DATA

	MOVLW "D"
	CALL LCD_DATA

	MOVLW ":"
	CALL LCD_DATA

	MOVF DUTY_CYCLE, W
	CALL SHOW_THREE_NUMBERS

	RETURN

SHOW_THREE_NUMBERS:
	MOVWF SAVE_WORK_CALC

	MOVLW d'100'
	SUBWF SAVE_WORK_CALC, W
	BTFSC STATUS, 0
		CALL SHOW_FIRST_NUM
	BTFSS STATUS, 0
		CALL SHOW_BLANK

	MOVLW d'9'
	SUBWF SAVE_WORK_CALC, W
	BTFSC STATUS, 0
		CALL SHOW_SECOND_NUM
	BTFSS STATUS, 0
		CALL SHOW_BLANK
	
	CALL SHOW_THIRD_NUM

	MOVF SAVE_WORK_CALC, W
	RETURN

SHOW_BLANK:
	MOVLW b'00000000'
	CALL LCD_DATA
	RETURN

SHOW_FIRST_NUM:
	MOVF SAVE_WORK_CALC, W
	MOVWF DIVISOR
	MOVLW d'100'
	MOVWF DIVIDER
	CLRF QUOTIEN
	CLRF REMAINDER
	CALL DIV
	MOVLW b'00110000'
	ADDWF QUOTIEN, W
	CALL LCD_DATA
	BSF STATUS, 0
	RETURN

SHOW_SECOND_NUM:
	MOVF SAVE_WORK_CALC, W
	MOVWF DIVISOR
	MOVLW d'100'
	MOVWF DIVIDER
	CLRF QUOTIEN
	CLRF REMAINDER
	CALL DIV
	MOVF REMAINDER, DIVISOR
	MOVLW d'10'
	MOVWF DIVIDER
	CLRF REMAINDER
	CLRF QUOTIEN
	CALL DIV
	MOVLW b'00110000'
	ADDWF QUOTIEN, W
	CALL LCD_DATA
	BSF STATUS, 0
	RETURN

SHOW_THIRD_NUM:
	MOVF SAVE_WORK_CALC, W
	MOVWF DIVISOR
	MOVLW d'10'
	MOVWF DIVIDER
	CLRF QUOTIEN
	CLRF REMAINDER
	CALL DIV
	MOVLW b'00110000'
	ADDWF REMAINDER, W
	CALL LCD_DATA
	RETURN

DIV:
	CHECK:
		MOVF DIVIDER, W
		SUBWF DIVISOR, W
		BTFSC STATUS, 0
			GOTO SUB
		BTFSS STATUS, 0
			GOTO RET
	SUB:
		MOVF DIVIDER, W
		SUBWF DIVISOR, F
		MOVLW d'1'
		ADDWF QUOTIEN, F
		GOTO CHECK
	RET:
		MOVF DIVISOR, W
		MOVWF REMAINDER
		RETURN

TEST_RIGHT:
	MOVLW d'100'
	SUBWF POSITION, W
	BTFSC STATUS, 0
		CALL MAX_POSITION
	BTFSS STATUS, 0
		CALL RIGHT
	RETURN

TEST_LEFT:
	MOVLW d'0'
	SUBWF POSITION, W
	BTFSC STATUS, 2
		CALL MIN_POSITION
	BTFSS STATUS, 2
		CALL LEFT
	RETURN

MAX_POSITION:
	MOVLW d'100'
	MOVWF POSITION
	CALL SHOW_MAX
	CALL REALLY_STOP
	RETURN

MIN_POSITION:
	MOVLW d'0'
	MOVWF POSITION
	CALL SHOW_MIN
	CALL REALLY_STOP
	BSF STATUS, 2
	RETURN

REMOVE_SHOW_RIGHT_OR_LEFT:
	MOVLW h'CD'
	CALL LCD_COMMAND

	MOVLW h'00'
	CALL LCD_DATA

	MOVLW h'00'
	CALL LCD_DATA

	MOVLW h'00'
	CALL LCD_DATA
	RETURN

SHOW_MIN:
	MOVLW h'CD'
	CALL LCD_COMMAND

	MOVLW h'4D' ; M
	CALL LCD_DATA

	MOVLW h'49' ; I
	CALL LCD_DATA

	MOVLW h'4E' ; N
	CALL LCD_DATA
	
	RETURN

SHOW_MAX:
	MOVLW h'CD'
	CALL LCD_COMMAND

	MOVLW h'4D' ; M
	CALL LCD_DATA

	MOVLW h'41' ; A
	CALL LCD_DATA

	MOVLW h'58' ; X
	CALL LCD_DATA
	
	RETURN

RIGHT:
	CALL TURN_RIGHT
	CALL SHOW_RIGHT
	CALL REMOVE_SHOW_RIGHT_OR_LEFT
	DECFSZ	POSITION_COMPT_TIMER, F
		CALL INCREMENT_POSITION
	RETURN

LEFT:
	CALL TURN_LEFT
	CALL SHOW_LEFT
	CALL REMOVE_SHOW_RIGHT_OR_LEFT
	DECFSZ	POSITION_COMPT_TIMER, F
		CALL DECREMENT_POSITION
	RETURN

INCREMENT_POSITION:
	INCF POSITION, F
	MOVLW d'255'
	MOVWF POSITION_COMPT_TIMER
	RETURN

DECREMENT_POSITION:
	DECF POSITION, F
	MOVLW d'255'
	MOVWF POSITION_COMPT_TIMER
	RETURN

SHOW_STOP:
	MOVLW h'8A'
	CALL LCD_COMMAND

	MOVLW "S"
	CALL LCD_DATA

	MOVLW "T"
	CALL LCD_DATA

	MOVLW "O"
	CALL LCD_DATA

	MOVLW "P"
	CALL LCD_DATA

	MOVLW h'00'
	CALL LCD_DATA
	
	RETURN

SHOW_RIGHT:
	MOVLW h'8A'
	CALL LCD_COMMAND

	MOVLW "R"
	CALL LCD_DATA

	MOVLW "I"
	CALL LCD_DATA

	MOVLW "G"
	CALL LCD_DATA

	MOVLW "H"
	CALL LCD_DATA

	MOVLW "T"
	CALL LCD_DATA

	RETURN
	
SHOW_LEFT:
	MOVLW h'8A'
	CALL LCD_COMMAND

	MOVLW "L"
	CALL LCD_DATA

	MOVLW "E"
	CALL LCD_DATA

	MOVLW "F"
	CALL LCD_DATA

	MOVLW "T"
	CALL LCD_DATA

	MOVLW h'00'
	CALL LCD_DATA

	RETURN

LCD_COMMAND:
	MOVWF PORTD

	BCF PORTC, 5 ; RS
	BCF PORTC, 6 ; RW

	BSF PORTC, 7 ; E
	CALL DELAY
	BCF PORTC, 7 ; E

	RETURN

LCD_DATA:
	MOVWF PORTD

	BSF PORTC, 5 ; RS
	BCF PORTC, 6 ; RW

	BSF PORTC, 7 ; E
	CALL DELAY
	BCF PORTC, 7 ; E
	
	RETURN

TURN_RIGHT:
	MOVF DUTY_CYCLE, W
	MOVWF CCPR2L
	CALL DELAY
	RETURN

TURN_LEFT:
	MOVF DUTY_CYCLE, W
	MOVWF CCPR1L
	CALL DELAY
	RETURN


REALLY_STOP:
	MOVLW d'0'
	MOVWF CCPR1L
	MOVWF CCPR2L
	CALL DELAY
	CLRF PORTC
	CALL SHOW_STOP
	RETURN

ADC:
	MOVWF SAVE_WORK_ADC
	; Start ADC conversion
	MOVLW b'10000111'
	MOVWF ADCON0

    ; Wait for conversion to complete
    WAIT_CONVERSION:
        BTFSC   ADCON0, 2
        GOTO    WAIT_CONVERSION

    ; Read digital value
    MOVF ADRESH, W
	MOVWF DUTY_CYCLE
	CALL DELAY_5MS
	MOVF SAVE_WORK_ADC, W
	RETURN

DELAY_5MS:
	MOVF DUTY_CYCLE, SAVE_DUTY_CYCLE
	MOVWF SAVE_WORK_COMPT_5M
	MOVLW d'249'
	MOVWF COMPT2
	OUTER_LOOP:
		MOVLW d'249'
		MOVWF COMPT1
		LOOP:
			DECFSZ COMPT1, f
			GOTO LOOP
	DECFSZ COMPT2, f
	GOTO OUTER_LOOP
	MOVF SAVE_WORK_COMPT_5M, W
	MOVF SAVE_DUTY_CYCLE, DUTY_CYCLE
	RETURN

DELAY:
	MOVF DUTY_CYCLE, SAVE_DUTY_CYCLE
	MOVWF SAVE_WORK_COMPT
	MOVLW d'10'
	MOVWF COMPT2
	_OUTER_LOOP:
		MOVLW d'249'
		MOVWF COMPT1
		_LOOP:
			DECFSZ COMPT1, f
			GOTO _LOOP
	DECFSZ COMPT2, f
	GOTO _OUTER_LOOP
	MOVF SAVE_WORK_COMPT, W
	MOVF SAVE_DUTY_CYCLE, DUTY_CYCLE
	RETURN
	


; Subroutines

END